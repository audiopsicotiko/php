<?php
/*
 * This is a php implementation of autoproxy2pac
 */


function reg_encode($str) {
	$tmp_str=$str;
	$tmp_str=str_replace('/', "\\/", $tmp_str);
	$tmp_str=str_replace('.', "\\.", $tmp_str);
	$tmp_str=str_replace(':', "\\:", $tmp_str);
	$tmp_str=str_replace('%', "\\%", $tmp_str);
	$tmp_str=str_replace('*', ".*", $tmp_str);
	$tmp_str=str_replace('-', "\\-", $tmp_str);
	$tmp_str=str_replace('&', "\\&", $tmp_str);
	$tmp_str=str_replace('?', "\\?", $tmp_str);
	
	return $tmp_str;
}

if((!isset($_GET['raw']))&&(!isset($_GET['rulelist']))&&(empty($_GET['type'])||empty($_GET['host'])||empty($_GET['port'])))
{
	echo '
		<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
		<html xmlns="http://www.w3.org/1999/xhtml">
		<head profile="http://gmpg.org/xfn/11">
			<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
			<title>PTP AutoProxy2PAC</title>
			<style type="text/css">
				body {
					color:#333333;
					font:0.75em Arial,sans-serif;
					text-align:center;
				}
			</style>
		</head>
		<body>
			<div>
				<h3>Setup your pac</h3>
				<form action="pac.php" method="get" style="margin:0px;display:inline">
					Proxy Server:
					<select name="type">
						<option value="http">HTTP</option>
						<option value="socks">SOCKS</option>
					</select>
					<input name="host" type="text" size="16" value="127.0.0.1" />
					:
					<input name="port" type="text" size="5" value="8080" />
					<input type="submit" value="Get PAC" />
				</form>
				<form action="pac.php" method="get" style="margin:0px;display:inline">
					<input name="raw" type="submit" value="Get GFWLIST RAW" />
				</form>
				<!--
				<form action="pac.php" method="get" style="margin:0px;display:inline">
					<input name="rulelist" type="submit" value="Get GFWLIST RULE" />
				</form>
				-->
			</div>
		</body>
		';
	
	
	exit(0);

}

header('Content-Type: text/plain');


if($_GET['type']=='http')
	$type='PROXY';
else if ($_GET['type']=='socks')
	$type='SOCKS5';
else
	$type=$_GET['type'];

$host=$_GET['host'];
$port=$_GET['port'];
$gfwlist_url='http://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt';

$ch=curl_init();  
curl_setopt($ch, CURLOPT_URL, $gfwlist_url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$gfwlist_raw=curl_exec($ch);
curl_close($ch);
if(isset($_GET['raw']))
{
	echo $gfwlist_raw;
	exit(0);
}
$rulelist=base64_decode($gfwlist_raw);
if(isset($_GET['rulelist']))
{
	echo $rulelist;
	exit(0);
}
$gfwlist=explode("\n", $rulelist); 

?>
//Generated by PTP Remote PAC
function FindProxyForURL(url, host) {
	var PROXY = "<?php echo $type;?> <?php echo $host;?>:<?php echo $port;?>";
	var DEFAULT = "DIRECT";
	
	<?php
		foreach($gfwlist as $index=>$rule){
			if(empty($rule))
				continue;
			else if(substr($rule,0,1)=='!' || substr($rule,0,1)=='[')
				continue;
			$return_proxy='PROXY';
			if(substr($rule,0,2)=='@@')
			{
				$rule=substr($rule,2);
				$return_proxy="DEFAULT";
			}
			
			if(substr($rule,0,2)=='||')
			{
				$rule_reg = "^[\\w\\-]+:\\/+(?!\\/)(?:[^\\/]+\\.)?".reg_encode(substr($rule,2));
			}
			else if(substr($rule,0,1)=='|')
			{
				$rule_reg = "^".reg_encode(substr($rule,1));
			}
			else if(substr($rule,0,1)=='/'&&substr($rule,-1)=='/')
			{
				$rule_reg = substr($rule,1,strlen($rule)-2);
			}
			else
			{
				$rule_reg=reg_encode($rule);
			}
			echo '//'.$rule_reg."\n\t";
			echo 'if(new RegExp(decode64("'.base64_encode($rule_reg).'"),"i").test(url)) return '.$return_proxy."\n\t";
		}
	?>
	
	return DEFAULT;
}

function decode64(input) {
   var keyStr = "ABCDEFGHIJKLMNOP" +
                "QRSTUVWXYZabcdef" +
                "ghijklmnopqrstuv" +
                "wxyz0123456789+/" +
                "=";
  var output = "";
  var chr1, chr2, chr3 = "";
  var enc1, enc2, enc3, enc4 = "";
  var i = 0;

  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  var base64test = /[^A-Za-z0-9\+\/\=]/g;
  if (base64test.exec(input)) {
	 console.info("There were invalid base64 characters in the input text.\n" +
		   "Valid base64 characters are A-Z, a-z, 0-9, '+', '/', and '='\n" +
		   "Expect errors in decoding.");
  }
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

  do {
	 enc1 = keyStr.indexOf(input.charAt(i++));
	 enc2 = keyStr.indexOf(input.charAt(i++));
	 enc3 = keyStr.indexOf(input.charAt(i++));
	 enc4 = keyStr.indexOf(input.charAt(i++));

	 chr1 = (enc1 << 2) | (enc2 >> 4);
	 chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
	 chr3 = ((enc3 & 3) << 6) | enc4;

	 output = output + String.fromCharCode(chr1);

	 if (enc3 != 64) {
		output = output + String.fromCharCode(chr2);
	 }
	 if (enc4 != 64) {
		output = output + String.fromCharCode(chr3);
	 }

	 chr1 = chr2 = chr3 = "";
	 enc1 = enc2 = enc3 = enc4 = "";

  } while (i < input.length);

  return unescape(output);
}
